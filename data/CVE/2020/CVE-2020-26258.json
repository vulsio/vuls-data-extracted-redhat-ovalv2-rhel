{
	"id": "CVE-2020-26258",
	"vulnerabilities": [
		{
			"content": {
				"id": "CVE-2020-26258",
				"title": "CVE-2020-26258 XStream: Server-Side Forgery Request vulnerability can be activated when unmarshalling (moderate)",
				"description": "DOCUMENTATION: The MITRE CVE dictionary describes this issue as: XStream is a Java library to serialize objects to XML and back again. In XStream before version 1.4.15, a Server-Side Forgery Request vulnerability can be activated when unmarshalling. The vulnerability may allow a remote attacker to request data from internal resources that are not publicly available only by manipulating the processed input stream. If you rely on XStream's default blacklist of the Security Framework, you will have to use at least version 1.4.15. The reported vulnerability does not exist if running Java 15 or higher. No user is affected who followed the recommendation to setup XStream's Security Framework with a whitelist! Anyone relying on XStream's default blacklist can immediately switch to a whilelist for the allowed types to avoid the vulnerability. Users of XStream 1.4.14 or below who still want to use XStream default blacklist can use a workaround described in more detailed in the referenced advisories. \n            STATEMENT: OpenShift Container Platform (OCP) delivers jenkins package with bundled XStream library. Due to JEP-200 Jenkins project [1] and advisory SECURITY-383 [2], OCP jenkins package is not affected by this flaw.\n\n[1] https://github.com/jenkinsci/jep/blob/master/jep/200/README.adoc\n[2] https://www.jenkins.io/security/advisory/2017-02-01/  (see SECURITY-383 / CVE-2017-2608)\n            MITIGATION: As recommended, use XStream's security framework to implement a whitelist for the allowed types.\n\nUsers of XStream 1.4.14 who insist to use XStream default blacklist - despite that clear recommendation - can simply add two lines to XStream's setup code:\n\nxstream.denyTypes(new String[]{ \"jdk.nashorn.internal.objects.NativeString\" });\nxstream.denyTypesByRegExp(new String[]{ \".*\\\\.ReadAllStream\\\\$FileStream\" });\n\nUsers of XStream 1.4.13 who want to use XStream default blacklist can simply add three lines to XStream's setup code:\n\nxstream.denyTypes(new String[]{ \"javax.imageio.ImageIO$ContainsFilter\", \"jdk.nashorn.internal.objects.NativeString\" });\nxstream.denyTypes(new Class[]{ java.lang.ProcessBuilder.class });\nxstream.denyTypesByRegExp(new String[]{ \".*\\\\.ReadAllStream\\\\$FileStream\" });\n\nUsers of XStream 1.4.12 to 1.4.7 who want to use XStream with a blacklist will have to setup such a list from scratch and deny at least the following types: javax.imageio.ImageIO$ContainsFilter, java.beans.EventHandler, java.lang.ProcessBuilder, jdk.nashorn.internal.objects.NativeString, java.lang.Void and void and deny several types by name pattern.\n\nxstream.denyTypes(new String[]{ \"javax.imageio.ImageIO$ContainsFilter\", \"jdk.nashorn.internal.objects.NativeString\" });\nxstream.denyTypes(new Class[]{ java.lang.ProcessBuilder.class, java.beans.EventHandler.class, java.lang.ProcessBuilder.class, java.lang.Void.class, void.class });\nxstream.denyTypesByRegExp(new String[]{ \".*\\\\$LazyIterator\", \"javax\\\\.crypto\\\\..*\", \".*\\\\.ReadAllStream\\\\$FileStream\" });\n\nUsers of XStream 1.4.6 or below can register an own converter to prevent the unmarshalling of the currently know critical types of the Java runtime. It is in fact an updated version of the workaround for CVE-2013-7285:\n\nxstream.registerConverter(new Converter() {\n  public boolean canConvert(Class type) {\n    return type != null && (type == java.beans.EventHandler.class || type == java.lang.ProcessBuilder.class\n        || type.getName().equals(\"javax.imageio.ImageIO$ContainsFilter\") || type.getName().equals(\"jdk.nashorn.internal.objects.NativeString\")\n        || type == java.lang.Void.class || void.class || Proxy.isProxy(type)\n        || type.getName().startsWith(\"javax.crypto.\") || type.getName().endsWith(\"$LazyIterator\") || type.getName().endsWith(\".ReadAllStream$FileStream\"));\n  }\n\n  public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n    throw new ConversionException(\"Unsupported type due to security reasons.\");\n  }\n\n  public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {\n    throw new ConversionException(\"Unsupported type due to security reasons.\");\n  }\n}, XStream.PRIORITY_LOW);",
				"severity": [
					{
						"type": "vendor",
						"source": "secalert@redhat.com",
						"vendor": "moderate"
					},
					{
						"type": "cvss_v31",
						"source": "secalert@redhat.com",
						"cvss_v31": {
							"vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:N/A:N",
							"base_score": 7.7,
							"base_severity": "HIGH",
							"temporal_score": 7.7,
							"temporal_severity": "HIGH",
							"environmental_score": 7.7,
							"environmental_severity": "HIGH"
						}
					}
				],
				"cwe": [
					{
						"source": "secalert@redhat.com",
						"cwe": [
							"CWE-918"
						]
					}
				],
				"references": [
					{
						"source": "secalert@redhat.com",
						"url": "https://access.redhat.com/security/cve/CVE-2020-26258"
					}
				],
				"published": "2020-12-13T00:00:00Z",
				"modified": "2021-11-23T00:00:00Z"
			},
			"segments": [
				{
					"ecosystem": "redhat:7",
					"tag": "rhel-7-including-unpatched"
				}
			]
		}
	],
	"detections": [
		{
			"ecosystem": "redhat:7",
			"conditions": [
				{
					"criteria": {
						"operator": "OR",
						"criterias": [
							{
								"operator": "AND",
								"criterions": [
									{
										"type": "version",
										"version": {
											"vulnerable": true,
											"fix_status": {
												"class": "unfixed",
												"vendor": "Out of support scope"
											},
											"package": {
												"name": "xstream"
											}
										}
									}
								]
							},
							{
								"operator": "AND",
								"criterions": [
									{
										"type": "version",
										"version": {
											"vulnerable": true,
											"fix_status": {
												"class": "unfixed",
												"vendor": "Out of support scope"
											},
											"package": {
												"name": "xstream-javadoc"
											}
										}
									}
								]
							}
						]
					},
					"tag": "rhel-7-including-unpatched"
				}
			]
		}
	],
	"data_source": {
		"id": "redhat-ovalv2",
		"raws": [
			"vuls-data-raw-redhat-oval-repository-to-cpe/repository-to-cpe.json",
			"vuls-data-raw-redhat-ovalv2/7/rhel-7-including-unpatched/definitions/oval:com.redhat.cve:def:202026258.json",
			"vuls-data-raw-redhat-ovalv2/7/rhel-7-including-unpatched/objects/rpminfo_object/oval:com.redhat.cve:obj:20163674001.json",
			"vuls-data-raw-redhat-ovalv2/7/rhel-7-including-unpatched/objects/rpminfo_object/oval:com.redhat.cve:obj:20163674002.json",
			"vuls-data-raw-redhat-ovalv2/7/rhel-7-including-unpatched/tests/rpminfo_test/oval:com.redhat.cve:tst:20163674001.json",
			"vuls-data-raw-redhat-ovalv2/7/rhel-7-including-unpatched/tests/rpminfo_test/oval:com.redhat.cve:tst:20163674002.json",
			"vuls-data-raw-redhat-ovalv2/7/rhel-7-including-unpatched/tests/rpminfo_test/oval:com.redhat.cve:tst:20163674003.json",
			"vuls-data-raw-redhat-ovalv2/7/rhel-7-including-unpatched/tests/rpminfo_test/oval:com.redhat.cve:tst:20163674004.json",
			"vuls-data-raw-redhat-ovalv2/7/rhel-7-including-unpatched/tests/rpmverifyfile_test/oval:com.redhat.cve:tst:20042779005.json",
			"vuls-data-raw-redhat-ovalv2/7/rhel-7-including-unpatched/tests/rpmverifyfile_test/oval:com.redhat.cve:tst:20042779006.json"
		]
	}
}
